data = dat_hist,
x =~ Probability,
y =~ Count,
text =~ text,
hoverinfo = 'text',
color =~ color) |>
add_bars() |>
layout(
shapes = list(vline(0.15))
)
plot_ly(
data = dat_hist,
x =~ Probability,
y =~ Count,
text =~ text,
hoverinfo = 'text',
color =~ color) |>
add_bars() |>
layout(
shapes = list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = 0.15,
x1 = 0.15,
line = list(color = "black", dash="dot")
)
)
dat_hist <- data.frame(
Probability = list_hist$mids,
Count = list_hist$counts,
color = I("grey")
) |>
mutate(
text = glue("{Count} Observations
[{Probability-0.05}, {Probability+0.05})" )
dat_hist <- data.frame(
list_hist <- hist(probs,
plot = FALSE,
breaks = seq(0, 1, by = 0.05))
dat_hist <- data.frame(
Probability = list_hist$mids,
Count = list_hist$counts,
color = I("grey")
) |>
mutate(
text = glue("{Count} Observations
[{Probability-0.05}, {Probability+0.05})" )
)
plot_ly(
data = dat_hist,
x =~ Probability,
y =~ Count,
text =~ text,
hoverinfo = 'text',
color =~ color) |>
add_bars() |>
layout(
shapes = list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = 0.15,
x1 = 0.15,
line = list(color = "black", dash="dot")
)
)
dat_hist_015 <- dat_hist |>
mutate(
color = case_when(
Probability <= 0.15 ~ I("red"),
else ~ I("green")
library(rtichoke)
library(glue)
probs <- c(0.3, 0.6, 0.4, 0.1, 0.4, 0.7, 0.3, 0.1, 0.2, 0.1)
reals <- c(0, 1, 1, 0, 1, 1, 0, 0, 1, 0)
library(plotly)
list_hist <- hist(probs,
plot = FALSE,
breaks = seq(0, 1, by = 0.05))
dat_hist <- data.frame(
Probability = list_hist$mids,
Count = list_hist$counts,
color = I("grey")
) |>
mutate(
text = glue("{Count} Observations
[{Probability-0.05}, {Probability+0.05})" )
)
plot_ly(
data = dat_hist,
x =~ Probability,
y =~ Count,
text =~ text,
hoverinfo = 'text',
color =~ color) |>
add_bars() |>
layout(
shapes = list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper",
x0 = 0.15,
x1 = 0.15,
line = list(color = "black", dash="dot")
)
)
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[4,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[4,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[4,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>   gt::as_raw_html()
library(magrittr)
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[4,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[4,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[4,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>   gt::as_raw_html()
library(magrittr)
performance_data_example <- prepare_performance_data(
probs = list(
c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
),
reals = list(
c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
),
by = 0.1, stratified_by = "ppcr"
)
library(magrittr)
performance_data_example <- rtichoke::prepare_performance_data(
probs = list(
c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
),
reals = list(
c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
),
by = 0.1, stratified_by = "ppcr"
)
bar_chart_new <- function(value, display, color = "red"){
display_metric <- glue::glue("{display} <br> ({round(display / 10, digits = 1)}%)")
glue::glue("<span style=\"display: inline-block;direction: ltr;
border-radius: 4px; padding-right: 2px;
background-color: {color}; color: black;
width: {value}%\">{display_metric}</span>") %>%
as.character() %>%
gt::html()
}
add_color_to_confusion_metric_new <- function(performance_dat, metric, color) {
performance_dat %>%
dplyr::mutate(metric_plot = 100 * {{ metric }} / 10, metric_plot = purrr::map2(metric_plot, {{ metric }}, .f = ~ bar_chart_new(
value = .x, display = .y, color = color
))) %>%
dplyr::mutate(`:=`({{ metric }}, .data$metric_plot)) %>%
dplyr::select(-.data$metric_plot)
}
list_per_ppcr <- performance_data_example %>%
split(., .$ppcr)
confusion_matrix_list <- performance_data_example |>
dplyr::mutate(n_obs = 10,
predicted_negatives = TN + FN,
predicted_positives = TP + FP,
real_negatives = TN + FP,
real_positives = TP + FN) |>
add_color_to_confusion_metric_new(predicted_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_positives, "lightgray")|>
add_color_to_confusion_metric_new(TP, "lightgreen") %>%
add_color_to_confusion_metric_new(TN, "lightgreen") %>%
add_color_to_confusion_metric_new(FP, "pink") %>%
add_color_to_confusion_metric_new(FN, "pink") |>
add_color_to_confusion_metric_new(n_obs, "lightgray")|>
add_color_to_confusion_metric_new(predicted_positives, "lightgray")|>
dplyr::select(ppcr, TP, TN, FP, FN,
predicted_positives,
real_negatives,
real_positives,
predicted_negatives,
n_obs)
turn_performance_data_to_confusion_matrix_gt <- function(performance_data_gt) {
tibble::tibble(
reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),
predicted_positives = c(
performance_data_gt$TP,
performance_data_gt$FP,
performance_data_gt$predicted_positives),
predicted_negatives = c(
performance_data_gt$FN,
performance_data_gt$TN,
performance_data_gt$predicted_negatives
),
margin = c(
performance_data_gt$real_positives,
performance_data_gt$real_negatives,
performance_data_gt$n_obs
)) |>
gt::gt(rowname_col = "reals") |>
gt::cols_label(
margin = "",
predicted_positives = gt::md("**Predicted<br>Positives**"),
predicted_negatives = gt::md("**Predicted<br>Negatives**")
) |>
gt::fmt_markdown(columns = reals) %>%
gt::cols_width(
gt::everything() ~ px(100)
)
}
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[4,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[4,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[4,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>   gt::as_raw_html()
tibble::tibble(   y_hat = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0) ) |>    dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>    gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>    gt::cols_width(       gt::everything() ~ px(90)     ) |>   gt::tab_options(     table.font.size = gt::px(50)   ) |>   gt::cols_align(align = "center", columns = dplyr::everything()) |>    gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2, V3))   )
tibble::tibble(   y_hat = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0) ) |>    dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>    gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>    gt::cols_width(       gt::everything() ~ px(90)     ) |>   gt::tab_options(     table.font.size = gt::px(50)   ) |>   gt::cols_align(align = "center", columns = dplyr::everything()) |>    gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2, V3))   )
tibble::tibble(   y_hat = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0) ) |>
dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>
gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>
gt::cols_width(       gt::everything() ~ px(90)     ) |>
gt::tab_options(     table.font.size = gt::px(50)   ) |>
gt::cols_align(align = "center", columns = dplyr::everything()) |>
gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2, V3))   )
tibble::tibble(   y_hat = c(1, 1, 1, 1, 1, 0, 0, 0, 0, 0) ) |>
dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>
gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>
gt::cols_width(       gt::everything() ~ px(90)     ) |>
gt::tab_options(     table.font.size = gt::px(50)   ) |>
gt::cols_align(align = "center", columns = dplyr::everything()) |>
gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2, V3))   )
library(magrittr)
performance_data_example <- rtichoke::prepare_performance_data(
probs = list(
c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
),
reals = list(
c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
),
by = 0.1, stratified_by = "ppcr"
)
bar_chart_new <- function(value, display, color = "red"){
display_metric <- glue::glue("{display} <br> ({round(display / 10, digits = 1)}%)")
glue::glue("<span style=\"display: inline-block;direction: ltr;
border-radius: 4px; padding-right: 2px;
background-color: {color}; color: black;
width: {value}%\">{display_metric}</span>") %>%
as.character() %>%
gt::html()
}
add_color_to_confusion_metric_new <- function(performance_dat, metric, color) {
performance_dat %>%
dplyr::mutate(metric_plot = 100 * {{ metric }} / 10, metric_plot = purrr::map2(metric_plot, {{ metric }}, .f = ~ bar_chart_new(
value = .x, display = .y, color = color
))) %>%
dplyr::mutate(`:=`({{ metric }}, .data$metric_plot)) %>%
dplyr::select(-.data$metric_plot)
}
list_per_ppcr <- performance_data_example %>%
split(., .$ppcr)
confusion_matrix_list <- performance_data_example |>
dplyr::mutate(n_obs = 10,
predicted_negatives = TN + FN,
predicted_positives = TP + FP,
real_negatives = TN + FP,
real_positives = TP + FN) |>
add_color_to_confusion_metric_new(predicted_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_positives, "lightgray")|>
add_color_to_confusion_metric_new(TP, "lightgreen") %>%
add_color_to_confusion_metric_new(TN, "lightgreen") %>%
add_color_to_confusion_metric_new(FP, "pink") %>%
add_color_to_confusion_metric_new(FN, "pink") |>
add_color_to_confusion_metric_new(n_obs, "lightgray")|>
add_color_to_confusion_metric_new(predicted_positives, "lightgray")|>
dplyr::select(ppcr, TP, TN, FP, FN,
predicted_positives,
real_negatives,
real_positives,
predicted_negatives,
n_obs)
turn_performance_data_to_confusion_matrix_gt <- function(performance_data_gt) {
tibble::tibble(
reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),
predicted_positives = c(
performance_data_gt$TP,
performance_data_gt$FP,
performance_data_gt$predicted_positives),
predicted_negatives = c(
performance_data_gt$FN,
performance_data_gt$TN,
performance_data_gt$predicted_negatives
),
margin = c(
performance_data_gt$real_positives,
performance_data_gt$real_negatives,
performance_data_gt$n_obs
)) |>
gt::gt(rowname_col = "reals") |>
gt::cols_label(
margin = "",
predicted_positives = gt::md("**Predicted<br>Positives**"),
predicted_negatives = gt::md("**Predicted<br>Negatives**")
) |>
gt::fmt_markdown(columns = reals) %>%
gt::cols_width(
gt::everything() ~ px(100)
)
}
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[4,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[4,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[4,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>   gt::as_raw_html()
tibble::tibble(   y_hat = c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0) ) |>
dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>
gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>
gt::cols_width(       gt::everything() ~ px(90)     ) |>
gt::tab_options(     table.font.size = gt::px(50)   ) |>
gt::cols_align(align = "center", columns = dplyr::everything()) |>
gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2, V3))   )
tibble::tibble(   y_hat = c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0) ) |>
dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>
gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>
gt::cols_width(       gt::everything() ~ px(90)     ) |>
gt::tab_options(     table.font.size = gt::px(50)   ) |>
gt::cols_align(align = "center", columns = dplyr::everything()) |>
gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2))   )
library(magrittr)
performance_data_example <- rtichoke::prepare_performance_data(
probs = list(
c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
),
reals = list(
c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
),
by = 0.1, stratified_by = "ppcr"
)
bar_chart_new <- function(value, display, color = "red"){
display_metric <- glue::glue("{display} <br> ({round(display / 10, digits = 1)}%)")
glue::glue("<span style=\"display: inline-block;direction: ltr;
border-radius: 4px; padding-right: 2px;
background-color: {color}; color: black;
width: {value}%\">{display_metric}</span>") %>%
as.character() %>%
gt::html()
}
add_color_to_confusion_metric_new <- function(performance_dat, metric, color) {
performance_dat %>%
dplyr::mutate(metric_plot = 100 * {{ metric }} / 10, metric_plot = purrr::map2(metric_plot, {{ metric }}, .f = ~ bar_chart_new(
value = .x, display = .y, color = color
))) %>%
dplyr::mutate(`:=`({{ metric }}, .data$metric_plot)) %>%
dplyr::select(-.data$metric_plot)
}
list_per_ppcr <- performance_data_example %>%
split(., .$ppcr)
confusion_matrix_list <- performance_data_example |>
dplyr::mutate(n_obs = 10,
predicted_negatives = TN + FN,
predicted_positives = TP + FP,
real_negatives = TN + FP,
real_positives = TP + FN) |>
add_color_to_confusion_metric_new(predicted_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_positives, "lightgray")|>
add_color_to_confusion_metric_new(TP, "lightgreen") %>%
add_color_to_confusion_metric_new(TN, "lightgreen") %>%
add_color_to_confusion_metric_new(FP, "pink") %>%
add_color_to_confusion_metric_new(FN, "pink") |>
add_color_to_confusion_metric_new(n_obs, "lightgray")|>
add_color_to_confusion_metric_new(predicted_positives, "lightgray")|>
dplyr::select(ppcr, TP, TN, FP, FN,
predicted_positives,
real_negatives,
real_positives,
predicted_negatives,
n_obs)
turn_performance_data_to_confusion_matrix_gt <- function(performance_data_gt) {
tibble::tibble(
reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),
predicted_positives = c(
performance_data_gt$TP,
performance_data_gt$FP,
performance_data_gt$predicted_positives),
predicted_negatives = c(
performance_data_gt$FN,
performance_data_gt$TN,
performance_data_gt$predicted_negatives
),
margin = c(
performance_data_gt$real_positives,
performance_data_gt$real_negatives,
performance_data_gt$n_obs
)) |>
gt::gt(rowname_col = "reals") |>
gt::cols_label(
margin = "",
predicted_positives = gt::md("**Predicted<br>Positives**"),
predicted_negatives = gt::md("**Predicted<br>Negatives**")
) |>
gt::fmt_markdown(columns = reals) %>%
gt::cols_width(
gt::everything() ~ px(100)
)
}
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>   gt::as_raw_html()
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>
tab_options(
table.background.color = "purple",
...
) |>
gt::as_raw_html()
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>
gt::tab_options(
table.background.color = "purple",
...
) |>
gt::as_raw_html()
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>
gt::tab_options(
table.background.color = "purple"
) |>
gt::as_raw_html()
) |>
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>
gt::tab_options(
table.background.color = "#fdf6e3"
) |>
gt::as_raw_html()
library(magrittr)
performance_data_example <- rtichoke::prepare_performance_data(
probs = list(
c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
),
reals = list(
c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
),
by = 0.1, stratified_by = "ppcr"
)
bar_chart_new <- function(value, display, color = "red"){
display_metric <- glue::glue("{display} <br> ({round(display / 10, digits = 1)}%)")
glue::glue("<span style=\"display: inline-block;direction: ltr;
border-radius: 4px; padding-right: 2px;
background-color: {color}; color: black;
width: {value}%\">{display_metric}</span>") %>%
as.character() %>%
gt::html()
}
add_color_to_confusion_metric_new <- function(performance_dat, metric, color) {
performance_dat %>%
dplyr::mutate(metric_plot = 100 * {{ metric }} / 10, metric_plot = purrr::map2(metric_plot, {{ metric }}, .f = ~ bar_chart_new(
value = .x, display = .y, color = color
))) %>%
dplyr::mutate(`:=`({{ metric }}, .data$metric_plot)) %>%
dplyr::select(-.data$metric_plot)
}
list_per_ppcr <- performance_data_example %>%
split(., .$ppcr)
confusion_matrix_list <- performance_data_example |>
dplyr::mutate(n_obs = 10,
predicted_negatives = TN + FN,
predicted_positives = TP + FP,
real_negatives = TN + FP,
real_positives = TP + FN) |>
add_color_to_confusion_metric_new(predicted_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_negatives, "lightgray")|>
add_color_to_confusion_metric_new(real_positives, "lightgray")|>
add_color_to_confusion_metric_new(TP, "lightgreen") %>%
add_color_to_confusion_metric_new(TN, "lightgreen") %>%
add_color_to_confusion_metric_new(FP, "pink") %>%
add_color_to_confusion_metric_new(FN, "pink") |>
add_color_to_confusion_metric_new(n_obs, "lightgray")|>
add_color_to_confusion_metric_new(predicted_positives, "lightgray")|>
dplyr::select(ppcr, TP, TN, FP, FN,
predicted_positives,
real_negatives,
real_positives,
predicted_negatives,
n_obs)
turn_performance_data_to_confusion_matrix_gt <- function(performance_data_gt) {
tibble::tibble(
reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),
predicted_positives = c(
performance_data_gt$TP,
performance_data_gt$FP,
performance_data_gt$predicted_positives),
predicted_negatives = c(
performance_data_gt$FN,
performance_data_gt$TN,
performance_data_gt$predicted_negatives
),
margin = c(
performance_data_gt$real_positives,
performance_data_gt$real_negatives,
performance_data_gt$n_obs
)) |>
gt::gt(rowname_col = "reals") |>
gt::cols_label(
margin = "",
predicted_positives = gt::md("**Predicted<br>Positives**"),
predicted_negatives = gt::md("**Predicted<br>Negatives**")
) |>
gt::fmt_markdown(columns = reals) %>%
gt::cols_width(
gt::everything() ~ px(100)
)
}
tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>
gt::tab_options(
table.background.color = "#fdf6e3"
)
tibble::tibble(   y_hat = c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0) ) |>
dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>
gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>
gt::cols_width(       gt::everything() ~ px(90)     ) |>
gt::tab_options(     table.font.size = gt::px(50)   ) |>
gt::cols_align(align = "center", columns = dplyr::everything()) |>
gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2))   )
tibble::tibble(   y_hat = c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0) ) |>
dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "ðŸ’Š", " " ),     emoji = "ðŸ˜·"   ) |>    t() |>   tibble::as_tibble() |>
gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>
gt::cols_width(       gt::everything() ~ px(90)     ) |>
gt::tab_options(     table.font.size = gt::px(50)   ) |>
gt::cols_align(align = "center", columns = dplyr::everything()) |>
gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2))   )  |>
gt::tab_options(
table.background.color = "#fdf6e3"
)
