---
title: "Performance Evaluation of Prediction Models with Binary Outcome"
author: "Uriah Finkel"
format:
  revealjs:
    theme:  [solarized, custom.scss]
    incremental: true
    preview-links: true
    chalkboard: true
    slide-number: true
---

## Agenda

-   Introducing some of the most common or useful (and sometimes not so common nor useful) performance metrics and curves.

-   Discussing how and when to use (and when not to use) the mentioned performance metrics and curves.

## Code for Performance Metrics and Curves

All interactive plots in this presentation were created with [**rtichoke**](https://uriahf.github.io/rtichoke/) (I am the author üëã).

![](https://rtichoke-blog.netlify.app/gaston_rtichoke.png){width="200"}

You are also invited to explore [**rtichoke blog**](https://rtichoke-blog.netlify.app/) for reproducible examples and some theory.

## Motivation

### Why using performance metrics? ü•áü•àü•â

-   Compare different candidate models.
-   Selecting features
-   Evaluate if the prediction model will do more harm than good.

## Categories of Performance Metrics and Curves

-   **Discrimination üññ**: Model's ability to separate between events and non-events.

-   **Calibration ‚öñÔ∏è**: Agreement between predicted probabilities and the observed outcomes.

-   **Utility üëå**: The usefulness of the model in terms of decision-making.

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
### [Green]{style="color: green;"} {style="text-align: center; font-size: 200px;"}

::: {style="height:123px; width:100%; clear:both;"}
:::

### **üôÇ** {style="text-align: center; font-size: 120px;"}
:::

::: {.column width="50%"}
### [Red]{style="color: red;"} {style="text-align: center; font-size: 200px;"}

::: {style="height:123px; width:100%; clear:both;"}
:::

### **üôÅ** {style="text-align: center; font-size: 120px;"}
:::
:::

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
### [Green]{style="color: green;"} {style="text-align: center; font-size: 200px;"}

::: {style="height: 0px; width:100%; clear:both;"}
:::

![](Maccabi_Haifa_FC_logo2.png){fig-align="center" width="300"}
:::

::: {.column width="50%"}
### [Red]{style="color: red;"} {style="text-align: center; font-size: 200px;"}

::: {style="height: 55px; width:100%; clear:both;"}
:::

![](Hapoel_Haifa_Football_Club_Logo.png){fig-align="center" width="258"}
:::
:::

# Discrimination üññ

## [True Positives]{style="color: green;"} {.smaller}

### Infected and Predicted as Infected - [Good]{style="color: green;"}

[**üíä**]{style="font-size: 50px;"} <br> [ü§¢]{style="font-size: 50px;"}

```{r}

library(magrittr)

performance_data_example <- rtichoke::prepare_performance_data(
  probs = list(
    c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
  ),
  reals = list(
     c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
  ),
  by = 0.1, stratified_by = "ppcr"
)

bar_chart_new <- function(value, display, color = "red"){
  
  display_metric <- glue::glue("{display} <br> ({round(display / 10, digits = 1)}%)")
  
  glue::glue("<span style=\"display: inline-block;direction: ltr;
             border-radius: 4px; padding-right: 2px;
             background-color: {color}; color: black;
             width: {value}%\">{display_metric}</span>") %>% 
    as.character() %>% 
    gt::html()
}

add_color_to_confusion_metric_new <- function(performance_dat, metric, color) {
  performance_dat %>%
    dplyr::mutate(metric_plot = 100 * {{ metric }} / 10, metric_plot = purrr::map2(metric_plot, {{ metric }}, .f = ~ bar_chart_new(
      value = .x, display = .y, color = color
    ))) %>%
    dplyr::mutate(`:=`({{ metric }}, .data$metric_plot)) %>%
    dplyr::select(-.data$metric_plot)
}

list_per_ppcr <- performance_data_example %>%
  split(., .$ppcr)


confusion_matrix_list <- performance_data_example |>
  dplyr::mutate(n_obs = 10,
                predicted_negatives = TN + FN,
                predicted_positives = TP + FP,
                real_negatives = TN + FP,
                real_positives = TP + FN) |> 
  add_color_to_confusion_metric_new(predicted_negatives, "lightgray")|> 
  add_color_to_confusion_metric_new(real_negatives, "lightgray")|> 
  add_color_to_confusion_metric_new(real_positives, "lightgray")|> 
  add_color_to_confusion_metric_new(TP, "lightgreen") %>% 
  add_color_to_confusion_metric_new(TN, "lightgreen") %>% 
  add_color_to_confusion_metric_new(FP, "pink") %>% 
  add_color_to_confusion_metric_new(FN, "pink") |> 
  add_color_to_confusion_metric_new(n_obs, "lightgray")|>
  add_color_to_confusion_metric_new(predicted_positives, "lightgray")|> 
  dplyr::select(ppcr, TP, TN, FP, FN, 
                predicted_positives, 
                real_negatives,
                real_positives,
                predicted_negatives,
                n_obs) 

turn_performance_data_to_confusion_matrix_gt <- function(performance_data_gt) {
  
  tibble::tibble(
    reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),
    predicted_positives = c(
      performance_data_gt$TP,
      performance_data_gt$FP,
      performance_data_gt$predicted_positives), 
    predicted_negatives = c(
      performance_data_gt$FN,
      performance_data_gt$TN, 
      performance_data_gt$predicted_negatives
    ),
    margin = c(
      performance_data_gt$real_positives, 
      performance_data_gt$real_negatives, 
      performance_data_gt$n_obs
    )) |> 
    gt::gt(rowname_col = "reals") |> 
    gt::cols_label(
      margin = "",
      predicted_positives = gt::md("**Predicted<br>Positives**"),
      predicted_negatives = gt::md("**Predicted<br>Negatives**")
    ) |>
   gt::fmt_markdown(columns = reals) %>%
    gt::cols_width(
      gt::everything() ~ px(100)
    )|>   
  gt::tab_options(
      table.background.color = "#fdf6e3"
    ) 
    
  
}

tibble::tribble(
  ~"type", ~"predicted_positive", ~"predicted_negative",
  "Real Positive", "TP", "FN",
  "Real Negative", "FP", "TN"
) |> 
  reactable::reactable(
    theme = reactable::reactableTheme(
      backgroundColor = "#fdf6e3"
    ),
    sortable = FALSE,
            fullWidth = FALSE,
            borderless = FALSE,
            defaultColDef = reactable::colDef(
              align = "center",
              headerStyle  = list(fontWeight = 100)
            ),
            columns = list(
              type = reactable::colDef(
                name = "",
                align = "left",
                style = list(fontWeight = 100),
                minWidth = 200
              ),
              predicted_positive = reactable::colDef(
                name = "Predicted Positive",
                style = function(value) {
                  color <- if (value == "TP") {
                    "lightgreen"
                  }
                  
                  list(fontWeight = 600, background = color)
                },
                minWidth = 200
            ),
            predicted_negative = reactable::colDef(
              name = "Predicted Negative",
              style = function(value) {
                list(fontWeight = 600)
              },
                minWidth = 200
            )
            )
  )
```

## [False Positives]{style="color: red;"} {.smaller}

### Not-Infected and Predicted as Infected - [BAD]{style="color: red;"}

[**üíä**]{style="font-size: 50px;"} <br> [ü§®]{style="font-size: 50px;"}

```{r}
 
tibble::tribble(
  ~"type", ~"predicted_positive", ~"predicted_negative",
  "Real Positive", "TP", "FN",
  "Real Negative", "FP", "TN"
) |> 
  reactable::reactable(
    theme = reactable::reactableTheme(
      backgroundColor = "#fdf6e3"
    ),
    sortable = FALSE,
            fullWidth = FALSE,
            borderless = FALSE,
            defaultColDef = reactable::colDef(
              align = "center",
              headerStyle  = list(fontWeight = 100)
            ),
            columns = list(
              type = reactable::colDef(
                name = "",
                align = "left",
                style = list(fontWeight = 100),
                minWidth = 200
              ),
              predicted_positive = reactable::colDef(
                name = "Predicted Positive",
                style = function(value) {
                  color <- if (value == "FP") {
                    "pink"
                  }
                  
                  list(fontWeight = 600, background = color)
                },
                minWidth = 200
            ),
            predicted_negative = reactable::colDef(
              name = "Predicted Negative",
              style = function(value) {
                list(fontWeight = 600)
              },
                minWidth = 200
            )
            )
  )
```

## [False Negatives]{style="color: red;"} {.smaller}

### Infected and Predicted as Not-Infected - [BAD]{style="color: red;"}

<br> [ü§¢]{style="font-size: 50px;"}

```{r}
 
tibble::tribble(
  ~"type", ~"predicted_positive", ~"predicted_negative",
  "Real Positive", "TP", "FN",
  "Real Negative", "FP", "TN"
) |> 
  reactable::reactable(
    theme = reactable::reactableTheme(
      backgroundColor = "#fdf6e3"
    ),
    sortable = FALSE,
            fullWidth = FALSE,
            borderless = FALSE,
            defaultColDef = reactable::colDef(
              align = "center",
              headerStyle  = list(fontWeight = 100)
            ),
            columns = list(
              type = reactable::colDef(
                name = "",
                align = "left",
                style = list(fontWeight = 100),
                minWidth = 200
              ),
              predicted_positive = reactable::colDef(
                name = "Predicted Positive",
                style = function(value) {
                  list(fontWeight = 600)
                },
                minWidth = 200
            ),
            predicted_negative = reactable::colDef(
              name = "Predicted Negative",
              style = function(value) {
                 color <- if (value == "FN") {
                  "pink"
                 }
                list(fontWeight = 600, background = color)
              },
                minWidth = 200
            )
            )
  )
```

## [True Negatives]{style="color: green;"} {.smaller}

### Not-Infected and Predicted as Not-Infected - [GOOD]{style="color: green;"}

<br> [ü§®]{style="font-size: 50px;"}

```{r}
 
tibble::tribble(
  ~"type", ~"predicted_positive", ~"predicted_negative",
  "Real Positive", "TP", "FN",
  "Real Negative", "FP", "TN"
) |> 
  reactable::reactable(
    theme = reactable::reactableTheme(
      backgroundColor = "#fdf6e3"
    ),
    sortable = FALSE,
            fullWidth = FALSE,
            borderless = FALSE,
            defaultColDef = reactable::colDef(
              align = "center",
              headerStyle  = list(fontWeight = 100)
            ),
            columns = list(
              type = reactable::colDef(
                name = "",
                align = "left",
                style = list(fontWeight = 100),
                minWidth = 200
              ),
              predicted_positive = reactable::colDef(
                name = "Predicted Positive",
                style = function(value) {
                  list(fontWeight = 600)
                },
                minWidth = 200
            ),
            predicted_negative = reactable::colDef(
              name = "Predicted Negative",
              style = function(value) {
                 color <- if (value == "TN") {
                  "lightgreen"
                 }
                list(fontWeight = 600, background = color)
              },
                minWidth = 200
            )
            )
  )
```

## Probability Threshold:

-   When the intervention carries a **potential risk** and there is a trade-off of risks between the intervention and the outcome we will use probability threshold in order to classify each probability to Predicted Negative (Do not Treat) or Predicted Positive (Treat üíä).

-   This type of dichotomization is related to individuals with different preferences.

## Probability Threshold:

<table style="width:88%;">
<colgroup>
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
<col style="width: 7%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>pÃÇ</strong></p></td>
<td style="text-align: center;"><p>0.11</p></td>
<td style="text-align: center;"><p>0.15</p></td>
<td style="text-align: center;"><p>0.18</p></td>
<td style="text-align: center;"><p>0.29</p></td>
<td style="text-align: center;"><p>0.31</p></td>
<td style="text-align: center;"><p>0.33</p></td>
<td style="text-align: center;"><p>0.45</p></td>
<td style="text-align: center;"><p>0.47</p></td>
<td style="text-align: center;"><p>0.63</p></td>
<td style="text-align: center;"><p>0.72</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
</tr>
</tbody>
</table>

## Low Probability Threshold:

Low Probability Threshold means that I'm worried about the **outcome**:

-   I'm worried about **Prostate Cancer** ü¶Ä
-   I'm worried about **Heart Disease** üíî
-   I'm worried about **Infection** ü§¢

## Probability Threshold of 0.25

<table>
<thead>
<tr class="header">
<th style="text-align: center;"><p><strong>pÃÇ</strong></p></th>
<th style="text-align: center;"><p>0.11</p></th>
<th style="text-align: center;"><p>0.15</p></th>
<th style="text-align: center;"><p>0.18</p></th>
<th style="text-align: center;"><p>0.29</p></th>
<th style="text-align: center;"><p>0.31</p></th>
<th style="text-align: center;"><p>0.33</p></th>
<th style="text-align: center;"><p>0.45</p></th>
<th style="text-align: center;"><p>0.47</p></th>
<th style="text-align: center;"><p>0.63</p></th>
<th style="text-align: center;"><p>0.72</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>≈∂</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p>üíä<br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><span class="emoji" data-emoji="pill">üíä</span><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><span class="emoji" data-emoji="pill">üíä</span><br />
ü§®</p></td>
<td style="text-align: center;"><p><span class="emoji" data-emoji="pill">üíä</span><br />
ü§¢</p></td>
<td style="text-align: center;"><p>üíä<br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p>üíä<br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p>üíä<br />
ü§¢</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>FP</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
<td style="text-align: center;"><p><strong>FP</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
<td style="text-align: center;"><p><strong>FP</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
</tr>
</tbody>
</table>

## High Probability Threshold:

High Probability Threshold means that I'm worried about the **Intervention**:

-   I'm worried about **Biopsy** üíâ

-   I'm worried about **Statins** üíä

-   I'm worried about **Antibiotics** üíä

## Probability Threshold of 0.55

<table>
<thead>
<tr class="header">
<th style="text-align: center;"><p><strong>pÃÇ</strong></p></th>
<th style="text-align: center;"><p>0.11</p></th>
<th style="text-align: center;"><p>0.15</p></th>
<th style="text-align: center;"><p>0.18</p></th>
<th style="text-align: center;"><p>0.29</p></th>
<th style="text-align: center;"><p>0.31</p></th>
<th style="text-align: center;"><p>0.33</p></th>
<th style="text-align: center;"><p>0.45</p></th>
<th style="text-align: center;"><p>0.47</p></th>
<th style="text-align: center;"><p>0.63</p></th>
<th style="text-align: center;"><p>0.72</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>≈∂</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p>üíä<br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p>üíä<br />
ü§¢</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>FN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>FN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
</tr>
</tbody>
</table>

## Discrimination - Performance Curves

| Curve             | Sens | Spec | PPV | PPCR | Lift |
|:------------------|:----:|:----:|:---:|:----:|:----:|
| ROC               |  y   |  x   |     |      |      |
| Lift              |      |      |     |  x   |  y   |
| Precision- Recall |  x   |      |  y  |      |      |
| Gains             |  y   |      |     |  x   |      |

## ROC Curve

| Curve             | Sens  | Spec  | PPV | PPCR | Lift |
|:------------------|:-----:|:-----:|:---:|:----:|:----:|
| **ROC**           | **y** | **x** |     |      |      |
| Lift              |       |       |     |  x   |  y   |
| Precision- Recall |   x   |       |  y  |      |      |
| Gains             |   y   |       |     |  x   |      |

## ROC Curve {.smaller}

::: columns
::: {.column width="50%"}
-   The most famous form of Performance Metrics Visualization

-   Displays Sensitivity (also known as True Positive Rate or Percision) on the y axis

-   Displays 1 - Specificity (also known as False Positive Rate) on the x axis.
:::

::: {.column width="50%"}
```{r}

library(rtichoke)

create_roc_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome)
)
```
:::
:::

## Why I don't like ROC Curve üò§ {.smaller}

### Why 1 - Specificity? Why not just Specificity? üôÉ

::: columns
::: {.column width="40%"}
Honestly, I didn't find anywhere why *1 - Specificity* is more insightful than just *Specificity.*
:::

::: {.column width="60%"}
```{r}
library(rtichoke)

create_roc_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome)
) |> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )
```
:::
:::

## Why I don't like ROC Curve üò§ {.smaller}

### Why 1 - Specificity? Why not just Specificity? üôÉ

::: columns
::: {.column width="40%"}
Honestly, I didn't find anywhere why *1 - Specificity* is more insightful than just *Specificity.*
:::

::: {.column width="60%"}
```{r}
library(rtichoke)

perf_dat <- one_pop_one_model %>% 
  rtichoke:::add_hover_text_to_performance_data(
    "one population", 
    curve = "roc", 
    stratified_by = "probability threshold")

plotly::plot_ly(
  x = ~specificity, 
  y = ~sensitivity, 
  height = 550,
  width = 500
  ) |>  
  plotly::add_trace(
    data = perf_dat,
    type = "scatter",
    mode = "markers+lines", 
    color = I("black"), 
    hoverinfo = "text",
    text = ~text) |> 
  plotly::add_markers(
    frame = ~probability_threshold, 
    marker = list(
      size = 12, 
      line = list(width = 3, color = I("black")), 
      color = "#f6e3be"), 
    hoverinfo = "text", 
    text = ~text
  ) |> 
  rtichoke:::remove_grid_lines_from_plotly() |>
  plotly::layout(
    xaxis = list(
      title = "Specificity", fixedrange = TRUE), 
    yaxis = list(title = "Sensitivity",fixedrange = TRUE), 
    showlegend = FALSE) |> 
  plotly::config(displayModeBar = FALSE)|> 
  plotly::animation_slider(
    currentvalue = list(
      prefix = "Prob. Threshold: ",
      font = list(color = "black"),
      xanchor = "left"), 
    pad = list(t = 50)) |> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )
```
:::
:::

## Why I don't like ROC Curve üò§

### Sensitivity and Specificity do not respect the flow of time üï∞Ô∏è

![](real_positives_future.jpg)

## Why I don't like ROC Curve üò§

### Sensitivity and Specificity do not respect the flow of time üï∞Ô∏è {.smaller}

<br>

Sensitivity: $\begin{aligned} \ {\scriptsize \frac{\text{TP}}{\text{TP + FN}} = \text{Prob( Predicted Positive | Real Positive )}}\end{aligned}$

<br>

Specificity: $\begin{aligned} \ {\scriptsize \frac{\text{TN}}{\text{TN + FP}} = \text{Prob( Predicted Negative | Real Negative )} } \end{aligned}$

<br>

We do not know the condition of the conditional probability: Not the number of future Real Positives nor the number of Real Negatives in the future.

## Why I don't like ROC Curve üò§

### Sensitivity and Specificity do not respect the flow of time üï∞Ô∏è {.smaller}

<br>

PPV: $\begin{aligned} \ {\scriptsize \frac{\text{TP}}{\text{TP + FP}} = \text{Prob( Real Positive | Predicted Positive )}}\end{aligned}$

<br>

NPV: $\begin{aligned} \ {\scriptsize \frac{\text{TN}}{\text{TN + FN}} = \text{Prob( Real Negative | Predicted Negative )} } \end{aligned}$

We know the condition of the Conditional Probability: The number of Predicted Positives and the number of Predicted Negatives.

## Why I don't like ROC Curve üò§

### You don't care about AUROC, you care about the c-statistic

-   Generally speaking more area under a curve with two "Good" performance metrics means a better model. Other than that, there is no context and performance metrics with no context might lead to ambiguity and bad decisions.

-   Another Curve: Precision-Recall is made of PPV (Precision) and Sensitivity (Recall). How much PRAUC is enough?

## Why I don't like ROC Curve üò§

### You don't care about AUROC, you care about the c-statistic

-   Why not calculating GAINSAUC? Or any combination of two good performance metrics? We can get with Sensitivity, Specificity, NPV, PPV 6 AUC metrics. Do they provide any meaningful insight besides a vague *the more the better*?

## What is the AUROC of the following Models?

```{r}
set.seed(123)
library(rtichoke)
library(ggplot2)

second_model_probs <- c(
  example_dat$estimated_probabilities[1:100],
  sample(example_dat$estimated_probabilities, size = 50)
)

create_roc_curve(
  probs = list(
    "First Model" = example_dat$estimated_probabilities,
    "Second Model" = second_model_probs
  ),
  reals = list(example_dat$outcome),
  size = 500,
  interactive = TRUE
) |> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )

```

## What is the AUROC of the following Models?

![](khaby.gif)

```{r}
library(reactable)

options(reactable.theme = reactableTheme(
  backgroundColor = "#fdf6e3"
))

rtichoke:::create_table_for_auc(
  probs = list(
    "First Model" = example_dat$estimated_probabilities,
    "Second Model" = second_model_probs
  ),
  reals = list(example_dat$outcome)
)
```

## Why I don't like ROC Curve üò§

### You don't care about AUROC, you care about the c-statistic

-   High Ink-to-information ratio üòµ

-   One might suggest that the visual aspect is useful, but as human beings we are really bad at interpreting round things (That's why pie-charts are considered to be bad practice).

<!-- -->

-   Yet, the AUROC is valuable because of the equivalence to the c-statistic and it might provide good intuition about the performance of the model.

## Why I don't like ROC Curve üò§

### You don't care about AUROC, you care about the c-statistic

-   If you'll take randomly one event and one non-event, the probability that the event will be estimated with higher probability than the non-event is exactly the AUROC.

-   AUROC = p( pÃÇ(ü§®) \< pÃÇ(ü§¢) )

------------------------------------------------------------------------

```{r}
probs <- c(0.72, 0.63, 0.47, 0.45, 0.33, 0.31, 0.29, 0.18, 0.15, 0.11)
reals <- c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)

library(gt)
library(dplyr)
library(tibble)
library(glue)
library(tidyr)

original_data <-  tibble(
  probs = probs,
  reals = reals) %>%
  mutate(" " =ifelse(reals == 1, "ü§¢", "ü§®"))

original_gt <- original_data  |>
  gt::gt()  

original_gt_sorted <- original_data |>
  arrange(desc(probs)) |>
  gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    ) |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )

split_data <- original_data |> 
  split(reals)
  
split_gt_events  <- split_data$`1` |>
  gt::gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )

split_gt_nonevents <- split_data$`0` |>
  gt::gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )
  
split_gt_nonevents_with_age <- split_data$`0` |>
  mutate(AGE = c(68, 54, 56, 49, 6, 7),
         ` ` = case_when(AGE < 10 ~ "üßí", TRUE ~ "ü§®")) |> 
  relocate(AGE) |> 
  gt::gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**"),
    AGE ~ md("**AGE**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )

split_gt_nonevents_reduced <- split_data$`0` |>
  mutate(AGE = c(68, 54, 56, 49, 6, 7),
         ` ` = case_when(AGE < 10 ~ "üßí", TRUE ~ "ü§®")) |> 
  filter(AGE > 10) |> 
  relocate(AGE) |> 
  gt::gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**"),
    AGE ~ md("**AGE**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )

split_gt_events_with_age <- split_data$`1` |>
  mutate(AGE = c(86, 91, 72, 64),
         ` ` = case_when(AGE > 80 ~ "üëµ", TRUE ~ "ü§¢")) |> 
  relocate(AGE) |> 
  gt::gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**"),
    AGE ~ md("**AGE**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )

split_gt_events_reduced <- split_data$`1` |>
  mutate(AGE = c(86, 91, 72, 64),
         ` ` = case_when(AGE > 80 ~ "üëµ", TRUE ~ "ü§¢")) |> 
  relocate(AGE) |> 
  filter(AGE < 80) |> 
  gt::gt() |>
  cols_label (
    probs = md("**pÃÇ**"),
    reals ~ md("**Y**"),
    AGE ~ md("**AGE**")
  ) |> 
  tab_options(
    table.background.color = "#fdf6e3"
    )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )


auc_data <- expand_grid(
  split_data$`1` |> 
    select(-reals) |> 
    rename(
      "probs_event" = "probs",
      "emoji_event" = " "), 
  split_data$`0`|> 
    select(-reals) |> 
    rename(
      "probs_nonevent" = "probs",
      "emoji_nonevent" = " ")
) |> 
  mutate(
    bigger_equal = case_when(
      probs_event > probs_nonevent ~ ">",
      TRUE ~ "<"
    ),
    emoji_full = glue("{emoji_event} {bigger_equal} {emoji_nonevent}"),
    emoji_not_full = glue("{emoji_event}   {emoji_nonevent}"),
    discriminate = ifelse(
      bigger_equal == ">",
      "üëç", "üëé"
  )) |> 
  select(
    probs_event, emoji_full, emoji_not_full, probs_nonevent, bigger_equal, discriminate
  )

make_gt_auc_table <- function(auc_data, 
                              filled_with_checks = FALSE) {
  
  
  if (filled_with_checks == FALSE) {
    
    auc_data_ready <- auc_data |> 
      mutate(
        emoji_selected = emoji_not_full,
        discriminate = ""
      ) 
    
  } else {
    
    auc_data_ready <- auc_data |> 
      mutate(
        emoji_selected = emoji_full
      ) 
  }
  
  auc_gt_table <- auc_data_ready |> 
      select(
        probs_event, emoji_selected, probs_nonevent,
        bigger_equal, discriminate) |> 
  gt::gt() |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )   |>
    gt::tab_options(
        table.font.size = gt::px(20)
    )
  
  if (filled_with_checks == TRUE) {
    
    auc_gt_table <- auc_gt_table |>
  tab_style(
    style = list(
      cell_fill(color = "lightgreen")
    ),
    locations = cells_body(
      columns = c(emoji_selected, discriminate),
      rows = bigger_equal == ">"
    )
  ) |>
  tab_style(
    style = list(
      cell_fill(color = "pink")
    ),
    locations = cells_body(
      columns = c(emoji_selected, discriminate),
      rows = bigger_equal == "<"
    )
  ) 
    
  }
  
  auc_gt_table   |>
  cols_hide(
    columns = c(
       bigger_equal)) |>
  cols_label(
    probs_event = md("**pÃÇ**"),
    probs_nonevent = md("**pÃÇ**"),
    emoji_selected ~ " ",
    discriminate = "üññ"
  ) |>   
  tab_options(
    table.background.color = "#fdf6e3"
    ) |> 
    as_raw_html()
  
  
}


original_gt_sorted

```

------------------------------------------------------------------------

::: columns
::: {.column width="50%"}
```{r}
split_gt_events
```
:::

::: {.column width="50%"}
```{r}
split_gt_nonevents
```
:::
:::

![](cindex_binary_0.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 1
    )
  )
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[1:6,], filled_with_checks = FALSE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_1_a.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} }\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events|>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 1
    )
  ) 
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[1:6,], filled_with_checks = TRUE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_1_b.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 +}}{\text{6 + }}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 2
    )
  )
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[6 + 1:6,], filled_with_checks = FALSE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_2_a.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + }}{\text{6 +  }}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 2
    )
  )
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[6 + 1:6,], filled_with_checks = FALSE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_2_a.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + }}{\text{6 +  }}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events|>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 2
    )
  ) 
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[6 + 1:6,], filled_with_checks = TRUE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_2_b.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + 6 +}}{\text{6 + 6 + }}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 3
    )
  )
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[12 + 1:6,], filled_with_checks = FALSE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_3_a.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + 6 +}}{\text{6 + 6 +}}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events|>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 3
    )
  ) 
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[12 + 1:6,], filled_with_checks = TRUE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_3_b.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + 6 + 5 +}}{\text{6 + 6 + 6 +}}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 4
    )
  )
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[18 + 1:6,], filled_with_checks = FALSE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_4_a.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + 6 + 5 +}}{\text{6 + 6 + 6 +}}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events|>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = 4
    )
  ) 
```
:::

::: {.column width="34%"}
```{r}

make_gt_auc_table(auc_data[18 + 1:6,], filled_with_checks = TRUE)

```
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents |>
  tab_style(
    style = list(
      cell_fill(color = "cyan")
    ),
    locations = cells_body(
      rows = everything()
    )
  )
```
:::
:::

![](cindex_binary_4_b.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{#Concordants}}{\text{#Concordants + #Noncorcodants}} = \frac{\text{6 + 6 + 5 + 4}}{\text{6 + 6 + 6 + 6}}}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events
```
:::

::: {.column width="34%"}
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents 
```
:::
:::

![](cindex_binary_4_b.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{21}}{\text{24}} = 0.875}\end{aligned}$


## Why I don't like ROC Curve üò§

### You don't care about AUROC, you care about the c-statistic

```{r}
#| echo: true
probs <- c(0.11, 0.15, 0.18, 0.29, 0.31, 0.33, 0.45, 0.47, 0.63, 0.72)
reals <- c(0, 0, 0, 0, 1, 0, 1, 0, 1, 1)

pROC::auc(reals, probs)

probs_events <- probs[reals == 1]
probs_nonevents <- probs[reals == 0]

prop.table(
  table(
    sample(probs_events, replace = TRUE, size = 10000) >
    sample(probs_nonevents, replace = TRUE, size = 10000)
  )
)
```

## Why I don't like ROC Curve üò§

### You don't care about AUROC, you care about the c-statistic

```{python}
#| echo: true
import numpy as np
import random

probs = np.array([0.11, 0.15, 0.18, 0.29, 0.31, 0.33, 0.45, 0.47, 0.63, 0.72])
reals = np.array([0, 0, 0, 0, 1, 0, 1, 0, 1, 1])

probs_events = probs[reals == 1]
probs_nonevents = probs[reals == 0]

event_prob_greater_than_nonevent_prob = np.greater(
  random.choices(sorted(probs_events), 
  k = 10000),
  random.choices(sorted(probs_nonevents), 
  k = 10000)
)

unique_elements, counts_elements = np.unique(
  event_prob_greater_than_nonevent_prob, return_counts=True)

counts_elements / 10000

```

## Good AUROC does not necessarily mean a Good model

<table style="width:98%;">
<colgroup>
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>Age</strong></p></td>
<td style="text-align: center;"><p>7</p></td>
<td style="text-align: center;"><p>6</p></td>
<td style="text-align: center;"><p>49</p></td>
<td style="text-align: center;"><p>56</p></td>
<td style="text-align: center;"><p>64</p></td>
<td style="text-align: center;"><p>54</p></td>
<td style="text-align: center;"><p>72</p></td>
<td style="text-align: center;"><p>68</p></td>
<td style="text-align: center;"><p>91</p></td>
<td style="text-align: center;"><p>86</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>pÃÇ</strong></p></td>
<td style="text-align: center;"><p>0.11</p></td>
<td style="text-align: center;"><p>0.15</p></td>
<td style="text-align: center;"><p>0.18</p></td>
<td style="text-align: center;"><p>0.29</p></td>
<td style="text-align: center;"><p>0.31</p></td>
<td style="text-align: center;"><p>0.33</p></td>
<td style="text-align: center;"><p>0.45</p></td>
<td style="text-align: center;"><p>0.47</p></td>
<td style="text-align: center;"><p>0.63</p></td>
<td style="text-align: center;"><p>0.72</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
</tr>
</tbody>
</table>

AUROC shows how well your model discriminates between events and non-events given a target population.

## Good AUROC does not necessarily mean a Good model

<table style="width:98%;">
<colgroup>
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>Age</strong></p></td>
<td style="text-align: center;"><p>7</p></td>
<td style="text-align: center;"><p>6</p></td>
<td style="text-align: center;"><p>49</p></td>
<td style="text-align: center;"><p>56</p></td>
<td style="text-align: center;"><p>64</p></td>
<td style="text-align: center;"><p>54</p></td>
<td style="text-align: center;"><p>72</p></td>
<td style="text-align: center;"><p>68</p></td>
<td style="text-align: center;"><p>91</p></td>
<td style="text-align: center;"><p>86</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>pÃÇ</strong></p></td>
<td style="text-align: center;"><p>0.11</p></td>
<td style="text-align: center;"><p>0.15</p></td>
<td style="text-align: center;"><p>0.18</p></td>
<td style="text-align: center;"><p>0.29</p></td>
<td style="text-align: center;"><p>0.31</p></td>
<td style="text-align: center;"><p>0.33</p></td>
<td style="text-align: center;"><p>0.45</p></td>
<td style="text-align: center;"><p>0.47</p></td>
<td style="text-align: center;"><p>0.63</p></td>
<td style="text-align: center;"><p>0.72</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
üßí</p></td>
<td style="text-align: center;"><p><br />
üßí</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
üëµ</p></td>
<td style="text-align: center;"><p><br />
üëµ</p></td>
</tr>
</tbody>
</table>

This model has AUROC = 0875, but the number is misleading:\
The Target Population is not well defined.

## Bad AUROC does not necessarily mean a Bad model

+:-------:+:----:+:----:+:----:+:----:+:----:+:----:+
| **Age** | 49   | 56   | 64   | 54   | 72   | 68   |
+---------+------+------+------+------+------+------+
| **pÃÇ**   | 0.18 | 0.29 | 0.31 | 0.33 | 0.45 | 0.47 |
+---------+------+------+------+------+------+------+
| **Y**   | 0    | 0    | 1    | 0    | 1    | 0    |
+---------+------+------+------+------+------+------+
|         | \    | \    | \    | \    | \    | \    |
|         | ü§®   | ü§®   | ü§¢   | ü§®   | ü§¢   | ü§®   |
+---------+------+------+------+------+------+------+

This model has AUROC = 0.625, but the number is misleading:\
The Target Population is well defined.

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events
```
:::

::: {.column width="34%"}
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents 
```
:::
:::

![](cindex_binary_4_b.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{21}}{\text{24}} = 0.875}\end{aligned}$


------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events_with_age
```
:::

::: {.column width="34%"}
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents_with_age 
```
:::
:::

![](cindex_binary_4_b_with_age.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{21}}{\text{24}} = 0.875}\end{aligned}$

------------------------------------------------------------------------

::: columns
::: {.column width="33%"}
```{r}
split_gt_events_reduced
```
:::

::: {.column width="34%"}
:::

::: {.column width="33%"}
```{r}
split_gt_nonevents_reduced
```
:::
:::

![](cindex_binary_4_b_with_age_better_target_population.svg){fig-align="center"}

$\begin{aligned} \ {\scriptsize \text{C-index} = \frac{\text{5}}{\text{8}} = 0.625}\end{aligned}$

## Lift Curve

| Curve             | Sens | Spec | PPV | PPCR  | Lift  |
|:------------------|:----:|:----:|:---:|:-----:|:-----:|
| ROC               |  y   |  x   |     |       |       |
| **Lift**          |      |      |     | **x** | **y** |
| Precision- Recall |  x   |      |  y  |       |       |
| Gains             |  y   |      |     |   x   |       |

## Prevalence

::: columns
::: {.column width="50%"}
```{r}

tibble::tibble(
    reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),
    predicted_positives = c(
      " ",
      " ",
      " "), 
    predicted_negatives = c(
      " ",
      " ", 
      " "
    ),
    margin = c(
      confusion_matrix_list[2,]$real_positives, 
      confusion_matrix_list[2,]$real_negatives, 
      confusion_matrix_list[2,]$n_obs
    )) |> 
    gt::gt(rowname_col = "reals") |> 
    gt::cols_label(
      margin = "",
      predicted_positives = gt::md("**Predicted<br>Positives**"),
      predicted_negatives = gt::md("**Predicted<br>Negatives**")
    ) |>
   gt::fmt_markdown(columns = reals) %>%
    gt::cols_width(
      gt::everything() ~ px(100)
    ) |>
  gt::cols_align(align = "left", columns = dplyr::everything()) |>   
  gt::tab_options(
      table.background.color = "#fdf6e3"
    ) |>
  gt::as_raw_html() 


```
:::

::: {.column width="50%"}
$$\frac{\sum \text{Real-Positives}}{\sum \text{Observations}} = \frac{4}{10}$$
:::
:::

```{r}


tibble::tibble(
  y = c(1, 1, 0, 1, 0, 1, 0, 0, 0, 0)
) |> 
  dplyr::mutate(
    emoji = ifelse( y == 1, "ü§¢", "ü§®")
  ) |> 
  t() |>
  tibble::as_tibble() |> 
  gt::gt() |> 
  gt::tab_options(column_labels.hidden = TRUE) |> 
  gt::cols_width(
      gt::everything() ~ px(90)
    ) |>
  gt::tab_options(
    table.font.size = gt::px(50)
  ) |>
  gt::cols_align(align = "center", columns = dplyr::everything()) |> 
  gt::tab_style(
    style = list(
      "opacity: .2;"
    ),
    locations = gt::cells_body(columns = -c(V1, V2, V4, V6))
  )|>   
  gt::tab_options(
      table.background.color = "#fdf6e3"
    ) 


```

## PPCR (Predicted Positives Conditional Rate):

$\begin{aligned} \ {\scriptsize \frac{\text{TP + FP}}{\text{TP + FP + TN + FN}}}\end{aligned} = \begin{aligned} \ {\scriptsize \frac{\text{Predicted Positives}}{\text{Total Population}}}\end{aligned}$

-   Sometimes we will classify each observation according to the ranking of the risk In order to prioritize high-risk patients regardless their absolute risk.

-   The implied assumption is that the highest risk patients will gain the highest benefit from the treatment and that the treatment does not carry a significant potential risk.

-   This type of dichotomization is being used when the organization face resource constraint, In healthcare we call it also risk percentile.

## PPCR

::: columns
::: {.column width="50%"}
```{r}

tibble::tibble(     reals = c("**Real<br>Positives** ", "**Real<br>Negatives**", ""),     predicted_positives = c(       " ",       " ",       confusion_matrix_list[3,]$predicted_positives),      predicted_negatives = c(       " ",       " ",        confusion_matrix_list[3,]$predicted_negatives     ),     margin = c(       " ",       " ",       confusion_matrix_list[3,]$n_obs     )) |>      gt::gt(rowname_col = "reals") |>      gt::cols_label(       margin = "",       predicted_positives = gt::md("**Predicted<br>Positives**"),       predicted_negatives = gt::md("**Predicted<br>Negatives**")     ) |>    gt::fmt_markdown(columns = reals) %>%     gt::cols_width(       gt::everything() ~ px(100)     ) |>   gt::cols_align(align = "left", columns = dplyr::everything()) |>   
  gt::tab_options(
      table.background.color = "#fdf6e3"
    ) 
```
:::

::: {.column width="50%"}
$$\frac{\sum \text{Predicted-Positives}}{\sum \text{Observations}} = \frac{2}{10}$$
:::
:::

```{r}


tibble::tibble(   y_hat = c(1, 1, 0, 0, 0, 0, 0, 0, 0, 0) ) |>    
  dplyr::mutate(     emoji_trt = ifelse( y_hat == 1, "üíä", " " ),     emoji = "üò∑"   ) |>    t() |>   tibble::as_tibble() |>    
  gt::gt() |>    gt::tab_options(column_labels.hidden = TRUE) |>    
  gt::cols_width(       gt::everything() ~ px(90)     ) |>   
  gt::tab_options(     table.font.size = gt::px(50)   ) |>   
  gt::cols_align(align = "center", columns = dplyr::everything()) |>    
  gt::tab_style(     style = list(       "opacity: .2;"     ),     locations = gt::cells_body(columns = -c(V1, V2))   )  |>   
  gt::tab_options(
      table.background.color = "#fdf6e3"
    ) 
```

## PPCR of 0.2

<table style="width:98%;">
<colgroup>
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>pÃÇ</strong></p></td>
<td style="text-align: center;"><p>0.11</p></td>
<td style="text-align: center;"><p>0.15</p></td>
<td style="text-align: center;"><p>0.18</p></td>
<td style="text-align: center;"><p>0.29</p></td>
<td style="text-align: center;"><p>0.31</p></td>
<td style="text-align: center;"><p>0.33</p></td>
<td style="text-align: center;"><p>0.45</p></td>
<td style="text-align: center;"><p>0.47</p></td>
<td style="text-align: center;"><p>0.63</p></td>
<td style="text-align: center;"><p>0.72</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>R</strong></p></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><p><strong>≈∂</strong></p></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>

## PPCR of 0.2

<table style="width:98%;">
<colgroup>
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
<col style="width: 8%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>pÃÇ</strong></p></td>
<td style="text-align: center;"><p>0.11</p></td>
<td style="text-align: center;"><p>0.15</p></td>
<td style="text-align: center;"><p>0.18</p></td>
<td style="text-align: center;"><p>0.29</p></td>
<td style="text-align: center;"><p>0.31</p></td>
<td style="text-align: center;"><p>0.33</p></td>
<td style="text-align: center;"><p>0.45</p></td>
<td style="text-align: center;"><p>0.47</p></td>
<td style="text-align: center;"><p>0.63</p></td>
<td style="text-align: center;"><p>0.72</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>R</strong></p></td>
<td style="text-align: center;"><p>10</p></td>
<td style="text-align: center;"><p>9</p></td>
<td style="text-align: center;"><p>8</p></td>
<td style="text-align: center;"><p>7</p></td>
<td style="text-align: center;"><p>6</p></td>
<td style="text-align: center;"><p>5</p></td>
<td style="text-align: center;"><p>4</p></td>
<td style="text-align: center;"><p>3</p></td>
<td style="text-align: center;"><p>2</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><p><strong>≈∂</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p>üíä <br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p>üíä <br />
ü§¢</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>FN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>FN</strong></p></td>
<td style="text-align: center;"><p><strong>TN</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
<td style="text-align: center;"><p><strong>TP</strong></p></td>
</tr>
</tbody>
</table>

## Lift Curve

$\begin{aligned} \text{Lift} = \frac{\text{PPV}}{\text{Prevalence}} = \frac{\cfrac{\text{TP}}{\text{TP + FP}}}{\cfrac{\text{TP + FN}}{\text{TP + FP + TN + FN}}} \end{aligned}$

## Lift Curve {.smaller}

::: columns
::: {.column width="50%"}
-   Lift Curve displays Lift on the Y axis and PPCR (Predicted Positives Conditional Rate) on the X axis.

-   In other words, lift shows how much the prediction is doing better than a random guess in terms of PPV.

-   The reference line stands for a random guess: the Lift is equal to 1 (PPV = Prevalence).

-   The Curve is not defined if there are no Predicted Positives (probability threshold is too high or PPCR = 0).
:::

::: {.column width="50%"}
```{r}

create_rtichoke_curve_by_frame <- function(performance_data, curve, frame) {
  
  example_curve_list <- rtichoke:::create_rtichoke_curve_list(
    performance_data, 
    curve, 
    size = 300)
  
  size_height <- example_curve_list$size[[1]] 
  
  interactive_marker <- list(
    size = 12, 
    line = list(width = 3, color = I("black")))
  
  interactive_marker$color <- "#f6e3be"
  
  plotly::config(plotly::layout(
    plotly::add_markers(
      plotly::add_trace(
        plotly::add_lines(
          plotly::plot_ly(
            x = ~x,
            y = ~y, height = size_height, width = example_curve_list$size[[1]],
            hoverinfo = "text", text = ~text, color = ~reference_group,
            colors = unlist(example_curve_list$group_colors_vec)
          ),
          data = example_curve_list$reference_data, line = list(dash = "dot")
        ),
        data = example_curve_list$performance_data_ready_for_curve,
        type = "scatter", mode = "lines+markers", line = list(dash = "solid")
      ),
      data = example_curve_list$performance_data_for_interactive_marker[frame,],
      marker = interactive_marker
    ),
    xaxis = list(
      showgrid = FALSE, fixedrange = TRUE, range = example_curve_list$axes_ranges$xaxis,
      title = example_curve_list$axes_labels$xaxis
    ),
    yaxis = list(
      showgrid = FALSE, fixedrange = TRUE, range = example_curve_list$axes_ranges$yaxis,
      title = example_curve_list$axes_labels$yaxis
    ),
    showlegend = FALSE, plot_bgcolor = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)"
  ),
  displayModeBar = FALSE
  )  
}


create_lift_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome)
) 
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_0.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[1,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}

create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 1)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_01.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[2,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}

create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 2)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_02.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[3,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
# library(rtichoke)
# 
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 3)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_03.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[4,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
# library(rtichoke)
# 
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 4)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_04.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[5,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
# library(rtichoke)
# 
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 5)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_05.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[6,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
# library(rtichoke)
# 
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 6)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_06.svg)

::: columns
::: {.column width="50%"}
```{r}

confusion_matrix_list[7,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
# library(rtichoke)
# 
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 7)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_07.svg)

::: columns
::: {.column width="50%"}
```{r}
# N <- 10
# 
# structure(list(4L, 0L, 4L, 3L, 3L, 6L, 7L, 3L, 10L), dim = c(
#   3L,
#   3L
# ), dimnames = list(c(
#   "Predicted Positive", "Predicted Negative",
#   " "
# ), c("Real Positive", "Real Negative", " "))) |> 
#   tibble::as_tibble(rownames = "roname") |> 
#   gt::gt(rowname_col = "roname")|>
#   gt::as_raw_html()

confusion_matrix_list[8,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 8)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_08.svg)

::: columns
::: {.column width="50%"}
<!-- $\begin{aligned} \ {\scriptsize \text{PPCR} = \frac{\text{Predicted-Positives}}{\text{N}} = \frac{\text{3}}{\text{10}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{PPV} = \frac{\text{True-Positives}}{\text{Predicted-Positives}} = \frac{\text{1}}{\text{4}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{Prevalence} = \frac{\text{Real-Positives}}{\text{N}} = \frac{\text{3}}{\text{10}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{Lift} = \frac{\text{PPV}}{\text{Prevalence}} = \frac{\frac{1}{4}}{\frac{3}{10}} = \frac{3}{40}}\end{aligned}$ -->

```{r}
N <- 10

# structure(list(4L, 0L, 4L, 4L, 2L, 6L, 8L, 2L, 10L), dim = c(
#   3L,
#   3L
# ), dimnames = list(c(
#   "Predicted Positive", "Predicted Negative",
#   " "
# ), c("Real Positive", "Real Negative", " "))) |> 
#   tibble::as_tibble(rownames = "roname") |> 
#   gt::gt(rowname_col = "roname")|>
#   gt::as_raw_html()

confusion_matrix_list[9,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()


```
:::

::: {.column width="50%"}
```{r}
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 9)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_09.svg)

::: columns
::: {.column width="50%"}
<!-- $\begin{aligned} \ {\scriptsize \text{PPCR} = \frac{\text{Predicted-Positives}}{\text{N}} = \frac{\text{3}}{\text{10}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{PPV} = \frac{\text{True-Positives}}{\text{Predicted-Positives}} = \frac{\text{1}}{\text{4}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{Prevalence} = \frac{\text{Real-Positives}}{\text{N}} = \frac{\text{3}}{\text{10}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{Lift} = \frac{\text{PPV}}{\text{Prevalence}} = \frac{\frac{1}{4}}{\frac{3}{10}} = \frac{3}{40}}\end{aligned}$ -->

```{r}
confusion_matrix_list[10,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()


```
:::

::: {.column width="50%"}
```{r}
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 10)
```
:::
:::

## 

![](line%20of%20patients/line_ppcr_1.svg)

::: columns
::: {.column width="50%"}
<!-- $\begin{aligned} \ {\scriptsize \text{PPCR} = \frac{\text{Predicted-Positives}}{\text{N}} = \frac{\text{3}}{\text{10}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{PPV} = \frac{\text{True-Positives}}{\text{Predicted-Positives}} = \frac{\text{1}}{\text{4}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{Prevalence} = \frac{\text{Real-Positives}}{\text{N}} = \frac{\text{3}}{\text{10}}}\end{aligned}$ -->

<!-- $\begin{aligned} \ {\scriptsize \text{Lift} = \frac{\text{PPV}}{\text{Prevalence}} = \frac{\frac{1}{4}}{\frac{3}{10}} = \frac{3}{40}}\end{aligned}$ -->

```{r}
# N <- 10
# 
# structure(list(4L, 0L, 4L, 6L, 0L, 6L, 10L, 0L, 10L), dim = c(
#   3L,
#   3L
# ), dimnames = list(c(
#   "Predicted Positive", "Predicted Negative",
#   " "
# ), c("Real Positive", "Real Negative", " "))) |> 
#   tibble::as_tibble(rownames = "roname") |> 
#   gt::gt(rowname_col = "roname")|>
#   gt::as_raw_html()

confusion_matrix_list[11,] |>
  turn_performance_data_to_confusion_matrix_gt() |> 
  gt::cols_align(align = "left", columns = dplyr::everything()) |>
  gt::as_raw_html()

```
:::

::: {.column width="50%"}
```{r}
create_rtichoke_curve_by_frame(
  performance_data_example, "lift", 11)
```
:::
:::

## Precision-Recall

| Curve                 | Sens  | Spec |  PPV  | PPCR | Lift |
|:----------------------|:-----:|:----:|:-----:|:----:|:----:|
| ROC                   |   y   |  x   |       |      |      |
| Lift                  |       |      |       |  x   |  y   |
| **Precision- Recall** | **x** |      | **y** |      |      |
| Gains                 |   y   |      |       |  x   |      |

## Precision Recall {.smaller}

::: columns
::: {.column width="50%"}
-   Precision-Recall Curve displays PPV on the y axis and Sensitivity on the x axis.

-   The reference line stands for a random guess: the PPV is equal to the Prevalence, the Sensitivity depends on the Probability Threshold or PPCR.

-   The Curve is not defined if there are no Predicted Positives (probability threshold is too high or PPCR = 0).
:::

::: {.column width="50%"}
```{r}
create_precision_recall_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome)
) 
```
:::
:::

## Gains Curve

| Curve             | Sens  | Spec | PPV | PPCR  | Lift |
|:------------------|:-----:|:----:|:---:|:-----:|:----:|
| ROC               |   y   |  x   |     |       |      |
| Lift              |       |      |     |   x   |  y   |
| Precision- Recall |   x   |      |  y  |       |      |
| **Gains**         | **y** |      |     | **x** |      |

## Gains Curve {.smaller}

::: columns
::: {.column width="50%"}
-   Gains Curve displays Sensitivity on the y axis and PPCR on the x axis.

-   Gains shows the Sensitivity for a given PPCR.

-   Reference Line for a Random Guess: The sensitivity is equal to the proportion of predicted positives.

-   Reference Line for a Perfect Prediction: All Predicted Positives are Real Positives until there are no more Real Positives (PPCR = Prevalence, Sensitivity = 1).
:::

::: {.column width="50%"}
```{r}
create_gains_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome)
)
```
:::
:::

# Calibration **‚öñÔ∏è**

## Calibration **‚öñÔ∏è**

-   How well the model is "calibrated": Patients with a probability of about 0.2 are expected to have a proportion of about 0.2 observed events.

-   In order to asses calibration we need to use quantiles of estimated probabilities (discrete version of calibration) or some kind of smoothing algorithm.

-   The main idea is to visually inspect for similarity with the linear line of 45 degrees.

-   Visual inspection might be problematic, but from our experience it is a good-enough practice.

## Calibration **‚öñÔ∏è**

### Why should we care?

-   An accurate model in terms of discrimination might produce uncalibrated estimated probabilities what will lead to poor decisions.

-   Logistic Regression is calibrated by default, but if you use fancy ML prediction models they might not be calibrated.

## Calibration **‚öñÔ∏è**

### What if the model is not calibrated?

-   Uncalibrated models can be fixed by remodeling the predictions with a simple logistic regression (recalibration).

-   Python users might use [`sklearn.calibration.CalibratedClassifierCV`](https://scikit-learn.org/stable/modules/generated/sklearn.calibration.CalibratedClassifierCV.html).

-   Optimizing the logloss function will produce calibrated model.

## **Discrete** Calibration **‚öñÔ∏è**

<table>
<colgroup>
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
<col style="width: 9%" />
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: center;"><p><strong>pÃÇ</strong></p></td>
<td style="text-align: center;"><p>0.11</p></td>
<td style="text-align: center;"><p>0.15</p></td>
<td style="text-align: center;"><p>0.18</p></td>
<td style="text-align: center;"><p>0.29</p></td>
<td style="text-align: center;"><p>0.31</p></td>
<td style="text-align: center;"><p>0.33</p></td>
<td style="text-align: center;"><p>0.45</p></td>
<td style="text-align: center;"><p>0.47</p></td>
<td style="text-align: center;"><p>0.63</p></td>
<td style="text-align: center;"><p>0.72</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"><p><strong>R</strong></p></td>
<td style="text-align: center;"><p>10</p></td>
<td style="text-align: center;"><p>9</p></td>
<td style="text-align: center;"><p>8</p></td>
<td style="text-align: center;"><p>7</p></td>
<td style="text-align: center;"><p>6</p></td>
<td style="text-align: center;"><p>5</p></td>
<td style="text-align: center;"><p>4</p></td>
<td style="text-align: center;"><p>3</p></td>
<td style="text-align: center;"><p>2</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><p><strong>Y</strong></p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>0</p></td>
<td style="text-align: center;"><p>1</p></td>
<td style="text-align: center;"><p>1</p></td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p><br />
ü§®</p></td>
<td style="text-align: center;"><p><br />
ü§¢</p></td>
<td style="text-align: center;"><p><br />
<span class="emoji" data-emoji="raised_eyebrow">ü§®</span></p></td>
<td style="text-align: center;"><p>  <br />
<span class="emoji" data-emoji="nauseated_face">ü§¢</span></p></td>
<td style="text-align: center;"><p>  <br />
ü§¢</p></td>
</tr>
</tbody>
</table>

## **Discrete** Calibration **‚öñÔ∏è**

::: columns
::: {.column width="50%"}
+:-----:+:----:+:----:+:----:+:----:+
| **pÃÇ** | 0.11 | 0.15 | 0.18 | 0.29 |
+-------+------+------+------+------+
| **R** | 10   | 9    | 8    | 7    |
+-------+------+------+------+------+
| **≈∂** | 0    | 0    | 0    | 0    |
+-------+------+------+------+------+
| **Y** | 0    | 0    | 0    | 0    |
+-------+------+------+------+------+
|       | \    | \    | \    | \    |
|       | ü§®   | ü§®   | ü§®   | ü§®   |
+-------+------+------+------+------+
:::

::: {.column width="50%"}
$$\begin{aligned}
\scriptsize{
\\\text{Observed: }\frac{\text{0}}{\text{4}} = 0}
\end{aligned}$$

$$\begin{aligned}
\scriptsize{
\\\text{Predicted: }\frac{\text{0.11 + 0.15 + 0.18 + 0.29}}{\text{4}} = 0.1825}
\end{aligned}$$
:::
:::

## **Discrete** Calibration **‚öñÔ∏è**

::: columns
::: {.column width="50%"}
+:-----:+:---:+:----:+:----:+
| **pÃÇ** | 031 | 0.33 | 0.45 |
+-------+-----+------+------+
| **R** | 6   | 5    | 4    |
+-------+-----+------+------+
| **Y** | 1   | 0    | 1    |
+-------+-----+------+------+
|       | \   | \    | \    |
|       | ü§¢  | ü§®   | ü§¢   |
+-------+-----+------+------+
:::

::: {.column width="50%"}
$$\begin{aligned}
\scriptsize{
\\\text{Observed: }\frac{\text{2}}{\text{3}} = 0.66'}
\end{aligned}$$

$$\begin{aligned}
\scriptsize{
\\\text{Predicted: }\frac{\text{0.31 + 0.33 + 0.45}}{\text{3}} = 0.363'}
\end{aligned}$$
:::
:::

## **Discrete** Calibration **‚öñÔ∏è**

::: columns
::: {.column width="50%"}
+:-----:+:----:+:----:+:----:+
| **pÃÇ** | 0.47 | 0.63 | 0.72 |
+-------+------+------+------+
| **R** | 3    | 2    | 1    |
+-------+------+------+------+
| **Y** | 0    | 1    | 1    |
+-------+------+------+------+
|       | \    | \    | \    |
|       | ü§®   | ü§¢   | ü§¢   |
+-------+------+------+------+
:::

::: {.column width="50%"}
$$\begin{aligned}
\scriptsize{
\\\text{Observed: }\frac{\text{2}}{\text{3}} = 0.66'}
\end{aligned}$$

$$\begin{aligned}
\scriptsize{
\\\text{Predicted: }\frac{\text{0.47 + 0.63 + 0.72}}{\text{3}} = 0.607}
\end{aligned}$$
:::
:::

## **Discrete** Calibration **‚öñÔ∏è**

```{r}
probs <- c(0.3, 0.4, 0.4, 0.2, 0.1)
reals <- c(0, 1, 1, 1, 0)

plotly::plot_ly(
    heigt = 450,
    width = 450,
    x = ~Predicted, 
    y = ~Observed) |>  
  plotly::add_lines(
    name = "Perfect Calibration",
    data = data.frame(
      Observed = c(0, 1),
      Predicted = c(0, 1)),
      color = I("grey"), 
    line = list(dash="dot"),
    showlegend = FALSE
    ) |> 
  plotly::add_trace(
    data = data.frame(
      Observed = c(0, 2/3, 2/3),
      Predicted = c(0.1825, 0.363, 0.607)),
      color = I("black"), 
    showlegend = FALSE,
    name = "Discrete",
    mode = 'lines+markers',
    hovertemplate = paste0("<b>%{xaxis.title.text}:</b> %{x:.2f}<br>", 
                           "<b>%{yaxis.title.text}:</b> %{y:.2f}")) |> 
  plotly::layout(
    xaxis = list(showgrid = FALSE),
    yaxis = list(showgrid = FALSE),
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    ) |> 
  plotly::config(displayModeBar = FALSE)
```

## **Discrete** Calibration **‚öñÔ∏è**

```{r}

create_calibration_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome), type = "discrete"
)|> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )

```

## **Smooth** Calibration **‚öñÔ∏è** {.smaller}

::: columns
::: {.column width="40%"}
A different approach is to use a smoothing algorithm, in {rtichoke} I use *gam* for large samples and *lowess* for small samples.
:::

::: {.column width="60%"}
```{r}
create_calibration_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome), type = "smooth"
) |> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )
```
:::
:::

## **Smooth** Calibration **‚öñÔ∏è** {.smaller}

::: columns
::: {.column width="40%"}
If you use smooth calibration, take a moment to explore the ranges of the curve!

It might look bad if you don't zoom-in to the reasonable range of estimated probabilities. That's why many times you might see Histograms or Rug-plots under the Calibration Curve.
:::

::: {.column width="60%"}
```{r}

probs_small_probs <- c(rep(0.1, 10), 
                         rep(0.2, 10), 
                         rep(0.15, 10), 
                         rep(0.25, 10),
                       0.7) + runif(min = -0.02,
                                                max = 0.02,
                                                n = 41)
reals_small_probs <- c(c(1, rep(0, 9)), 
c(1, rep(0, 9)), 
c(rep(1, 2), rep(0, 8)), 
c(rep(1, 2), rep(0, 8)), 0 )


create_calibration_curve(
  size = 500,
  probs = list(probs_small_probs),
  reals = list(reals_small_probs),
  type = "smooth"
)|> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )

```
:::
:::

# Utility **üëå**

## Utility **üëå** {.smaller}

$$\begin{aligned}
\\{\text{Net Benefit}} = \frac{\text{TP}}{\text{N}} - \frac{\text{FP}}{\text{N}} * {\frac{{p_{t}}}{{1 - p_{t}}}}
\end{aligned}$$

-   In order to make a decision, we need to optimize utility. This requires some kind of price from the clinicians.\
    This price is the odds of the probability threshold.

-   Unlike other performance metrics, NB is based on decision making theory (which is reasonable, because we want to do better decision making).

-   Always consider two baseline approaches: Treat All and Treat None.

------------------------------------------------------------------------

![](decision_tree_mermaid_2.svg)

## Utility **üëå**

$$\begin{aligned}
\scriptsize{
\\{\text{Net Benefit}} = \frac{\text{TP}}{\text{N}} - \frac{\text{FP}}{\text{N}} * {\frac{{p_{t}}}{{1 - p_{t}}}}}
\end{aligned}$$

$$\begin{aligned}
\scriptsize{
\text{Net Benefit Treat All} = {\text{Prevalence}} -  {\text{(1 - Prevalence)}} *{\frac{{p_{t}}}{{1 - p_{t}}}}}
\end{aligned}$$

$$\begin{aligned}
\scriptsize{
\text{Net Benefit Treat None} = {\text{0}} 
}
\end{aligned}$$

## Utility **üëå** {.smaller}

::: columns
::: {.column width="50%"}
I will be indifferent üòê for having 1 **TP** for 4 **FP** $$p_t = \frac{1}{1 + 4} = 0.2$$ $$\frac{p_t}{1 - p_t} = \frac{0.2}{1 - 0.2} = \frac{1}{4}$$

$$\begin{aligned}[t]
{\text{Net Benefit}} &= {\frac{\text{1}}{\text{5}} - \frac{\text{4}}{\text{5}} * {\frac{1}{4}} = 0}
\end{aligned}$$
:::

::: {.column width="50%"}
![](indifferent.svg)
:::
:::

## Utility **üëå** {.smaller}

::: columns
::: {.column width="50%"}
I will be sad üôÅ for having 1 **TP** for 5 **FP** $$p_t = \frac{1}{1 + 4} = 0.2$$ $$\frac{p_t}{1 - p_t} = \frac{0.2}{1 - 0.2} = \frac{1}{4}$$ $$\begin{aligned}[t]
{\text{Net Benefit}} &= {\frac{\text{1}}{\text{6}} - \frac{\text{5}}{\text{6}} * {\frac{1}{4}} = -0.04166'}
\end{aligned}$$
:::

::: {.column width="50%"}
![](sad.svg)
:::
:::

## Utility **üëå** {.smaller}

::: columns
::: {.column width="50%"}
I will be happy üôÇ for having 1 **TP** for 3 **FP** $$p_t = \frac{1}{1 + 4} = 0.2$$ $$\frac{p_t}{1 - p_t} = \frac{0.2}{1 - 0.2} = \frac{1}{4}$$

$$\begin{aligned}[t]
{\text{Net Benefit}} &= {\frac{\text{1}}{\text{4}} - \frac{\text{3}}{\text{4}} * {\frac{1}{4}} = 0.0625}
\end{aligned}$$
:::

::: {.column width="50%"}
![](happy.svg)
:::
:::

## Utility - Decision Curve **üëå**

-   Decision Curve displays Net Benefit on the y axis and Probability Threshold on the x axis.

-   Reference Line for Treat All Strategy.

-   Reference line for Treat None Strategy.

## Utility - Decision Curve **üëå**

```{r}
create_decision_curve(
  size = 500,
  probs = list(example_dat$estimated_probabilities),
  reals = list(example_dat$outcome)
) |> 
  plotly::layout(
    plot_bgcolor  = "rgba(0, 0, 0, 0)",
    paper_bgcolor = "rgba(0, 0, 0, 0)",
    fig_bgcolor   = "rgba(0, 0, 0, 0)"
    )
```

# Thank You! üëã
